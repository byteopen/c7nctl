version: "0.21"
# this is a annotation
metadata:
  name: resource
spec:
  resources:
    requests: 
      cpu: 4000m
      memory: 40Gi
  basic:
    repoURL: https://openchart.choerodon.com.cn/choerodon/c7n/
    slaver:
      version: 0.1.0
      name: c7n-slaver
      image: registry.cn-hangzhou.aliyuncs.com/choerodon-tools/c7n-slaver:0.1.1
      ports:
      - containerPort: 9000
        name: http
        protocol: TCP
      - containerPort: 9001
        name: grpc
        protocol: TCP
      volumeMounts:
      - name: data
        mountPath: /data
      dataPath: /data
  release:
  - name: mysql
    chart: mysql
    version: 0.1.4
    resource:
      port: 3306
      # mysql 的 svc name 就是 release name
      host: '{{ getReleaseName "mysql" }}'
      password: '{{ getReleaseValue "mysql" "env.MYSQL_ROOT_PASSWORD"}}'
      username: root
    values:
    - name: "env.MYSQL_ROOT_PASSWORD"
      value: "admin"
      input:
        enabled: true
        regex: ".+"
        password: true
        tip: "请输入您要设置的mysql密码(不能为纯数字):"
        exclude:
        - value: "^\\d*$"
          name: "不能为纯数字"
  - name: redis
    chart: redis
    version: 0.2.5
    resource:
      # svc name = release name
      host: '{{ getReleaseName "redis" }}'
      port: 6379
    values:
    - name: "service.enabled"
      value: "true"
  - name: gitlab
    chart: gitlab-ha
    version: 0.2.2
    # 首先读取 用户配置文件，如果用户配置文件中没有则让用户输入
    resource: 
      schema: http
      # 如下是自引用的 postgres 配置
      host: '{{ getReleaseName "gitlab" }}-gitlab-database'
      port: 5432
      username: "gitlab"
      password: '{{ getReleaseValue "gitlab" "database.internal.password"}}'
    values:
      - name: "core.env.GITLAB_SECRETS_DB_KEY_BASE"
        value: '{{ generateAlphaNum 64 }}'
      - name: "core.env.GITLAB_SECRETS_SECRET_KEY_BASE"
        value: '{{ generateAlphaNum 64 }}'
      - name: "core.env.GITLAB_SECRETS_OTP_KEY_BASE"
        value: '{{ generateAlphaNum 64 }}'
      - name: "expose.ingress.host"
        value: '{{ ( getResource "gitlab").Domain }}'
        check: clusterdomain
      - name: "database.internal.password"
        value: '{{ generateAlphaNum 10 }}'
    ## exec some command when resource finished
    afterInstall:
    - name: create-gitlabadmin-binding
      psql:
      - CREATE EXTENSION IF NOT EXISTS pg_trgm;
      - INSERT INTO identities(extern_uid, provider, user_id, created_at, updated_at) VALUES ('1', 'oauth2_generic', 1, NOW(), NOW());
      infraRef: gitlab
      database: gitlabhq_production
  - name: minio
    chart: minio
    version: 5.0.4
    resource:
      host: minio
      port: 9000
      schema: http
    requirements:
    values:
    - name: "ingress.hosts[0]"
      value: '{{ ( getResource "minio" ).Domain }}'
      check: clusterdomain
    - name: "accessKey"
      value: "admin"
      input:
        enabled: true
        regex: ".{3,}"
        tip: "请设置的minio的ACCESS_KEY(3个字符以上,不能为纯数字):"
        password: false
        exclude:
        - value: "^\\d*$"
          name: "不能为纯数字"
    - name: "secretKey"
      value: "choerodon"
      input:
        enabled: true
        password: true
        regex: ".{8,40}"
        tip: "请设置的minio的SECRET_KEY(8-40字符,不能为纯数字):"
        exclude:
        - value: "^\\d*$"
          name: "不能为纯数字"
   # resource harbor
  - name: harbor
    chart: harbor
    version: 1.2.3
    resource:
      host: harbor
      port: 5000
      schema: https
    requirements:
    values:
    - name: "harborAdminPassword"
      value: "Choerodon123"
      input:
        enabled: true
        password: true
        regex: ".{8,}"
        tip: "请设置的Harbor管理员密码(8位以上、必须包含大小写及数字):"
        exclude:
        - value: "^\\d*$"
          name: "不能为纯数字"
        include:
        - value: "[A-Z]+"
          name: "必须包含大写"
        - value: "[a-z]+"
          name: "必须包含小写"
        - value: "\\d+"
          name: "必须包含数字"
    - name: "expose.ingress.hosts.core"
      value: '{{ ( getResource "harbor" ).Domain }}'
      check: clusterdomain
  - name: chartmuseum
    chart: chartmuseum
    version: 2.6.0
    resource:
      host: chartmuseum
      port: 80
      schema: http
    requirements:
    values:
    - name: "ingress.hosts[0].name"
      value: '{{ ( getResource "chartmuseum" ).Domain }}'
      check: clusterdomain
  - name: register-server
    chart: go-register-server
    version: "0.21.0"
    resource:
      # 默认 svc name 固定为 register-server
      host: "register-server"
      port: 8000
      schema: http
      url: "http://register-server:8000/eureka/"
    values:
  - name: base-service
    chart: base-service
    version: "0.21.5"
    resource:
      host: base-service
      schema: http
    requirements:
    - mysql
    - redis
    - register-server
    preInstall:
    - name: predb
      commands:
        - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
        - CREATE DATABASE IF NOT EXISTS base_service DEFAULT CHARACTER SET utf8;
        - GRANT ALL PRIVILEGES ON base_service.* TO choerodon@"%";
        - FLUSH PRIVILEGES;
      infraRef: mysql
    afterInstall:
    - name: create-client
      commands:
      - use base_service
      # 子符串过长 yaml_v2 序列化时会自动换行
      - |
        INSERT INTO base_service.oauth_client (name,organization_id,resource_ids,secret,scope,authorized_grant_types,
        web_server_redirect_uri,access_token_validity,refresh_token_validity,additional_information,auto_approve,
        object_version_number,created_by,creation_date,last_updated_by,last_update_date)VALUES("gitlab",1,"default",
        "secret","default","password,implicit,client_credentials,authorization_code,refresh_token",
        "{{ ( getResource "gitlab" ).Schema }}://{{ ( getResource "gitlab" ).Domain }}",3600,3600,"{}","default",1,0,NOW(),0,NOW());
      infraRef: mysql
    values:
  - name: manager-service
    chart: manager-service
    version: "0.21.0"
    resource:
      host: manager-service
      port: 8964
      schema: http
    requirements:
    - mysql
    - register-server
    - base-service
    preInstall:
    - name: predb
      commands:
        - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
        - CREATE DATABASE IF NOT EXISTS manager_service DEFAULT CHARACTER SET utf8;
        - GRANT ALL PRIVILEGES ON manager_service.* TO choerodon@"%";
        - FLUSH PRIVILEGES;
      infraRef: mysql
    values:
  - name: asgard-service
    chart: asgard-service
    version: "0.21.1"
    resource:
      host: asgard-service
      port: 18081
      schema: http
    requirements:
    - mysql
    - register-server
    - base-service
    preInstall:
    - name: predb
      commands:
        - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
        - CREATE DATABASE IF NOT EXISTS asgard_service DEFAULT CHARACTER SET utf8;
        - GRANT ALL PRIVILEGES ON asgard_service.* TO choerodon@"%";
        - FLUSH PRIVILEGES;
      infraRef: mysql
    values:
  - name: notify-service
    chart: notify-service
    version: "0.21.0"
    resource:
      host: notify-service
      schema: http
    requirements:
    - mysql
    - redis
    - register-server
    - manager-service
    preInstall:
    - name: predb
      commands:
        - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
        - CREATE DATABASE IF NOT EXISTS notify_service DEFAULT CHARACTER SET utf8;
        - GRANT ALL PRIVILEGES ON notify_service.* TO choerodon@"%";
        - FLUSH PRIVILEGES;
      infraRef: mysql
    values:
    - name: "ingress.host"
      value: '{{ ( getResource "notify-service" ).Domain }}'
      check: clusterdomain
  - name: api-gateway
    chart: api-gateway
    version: "0.21.0"
    resource:
      host: api-gateway
      schema: http
    requirements:
    - mysql
    - redis
    - register-server
    - manager-service
    values:
    - name: "env.open.JAVA_OPTS"
      value: "-Xms1024M -Xmx1024M"
    - name: "ingress.host"
      value: '{{ (getResource "api-gateway" ).Domain }}'
      check: clusterdomain
  - name: oauth-server
    chart: oauth-server
    version: "0.21.0"
    resource:
      host: oauth-server
      port: 8021
      schema: http
    requirements:
    - mysql
    - register-server
    - manager-service
    values:
    - name: "env.open.JAVA_OPTS"
      value: "-Xms1024M -Xmx1024M"
  - name: file-service
    chart: file-service
    version: "0.21.0"
    resource: 
      host: file-service
      schema: http
    requirements: 
    - mysql
    - register-server
    - manager-service
    - minio
    values:
    - name: "env.open.JAVA_OPTS"
      value: "-Xms1024M -Xmx1024M"
  - name: devops-service
    chart: devops-service
    version: "0.21.1"
    resource:
      host: devops-service
      port: 8061
      schema: ws
    requirements:
    - mysql
    - redis
    - gitlab
    - harbor
    - chartmuseum
    - register-server
    - manager-service
    - notify-service
    preInstall:
    - name: predb
      commands:
        - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
        - CREATE DATABASE IF NOT EXISTS devops_service DEFAULT CHARACTER SET utf8;
        - GRANT ALL PRIVILEGES ON devops_service.* TO choerodon@"%";
        - FLUSH PRIVILEGES;
      infraRef: mysql
    values:
    - name: "env.open.JAVA_OPTS"
      value: "-Xms1024M -Xmx1024M"
    - name: "ingress.host"
      value: '{{ ( getResource "devops-service" ).Domain }}'
      check: clusterdomain
    - name: SERVICES_GITLAB_PASSWORD
      value: "password"
      input:
        enabled: true
        password: true
        regex: ".+"
        tip: "请输入新用户默认Gitlab密码(不能为纯数字):"
        exclude:
          - value: "^\\d*$"
            name: "不能为纯数字"
  - name: gitlab-service
    chart: gitlab-service
    version: "0.21.0"
    resource:
      host: gitlab-service
      port: 8071
      schema: http
    requirements:
    - mysql
    - gitlab
    - register-server
    - manager-service
    preInstall:
    - name: predb
      commands:
        - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
        - CREATE DATABASE IF NOT EXISTS gitlab_service DEFAULT CHARACTER SET utf8;
        - GRANT ALL PRIVILEGES ON gitlab_service.* TO choerodon@"%";
        - FLUSH PRIVILEGES;
      infraRef: mysql
    - name: settoken
      psql:
      - |
        insert into personal_access_tokens (user_id, token_digest, name, expires_at, created_at, updated_at, scopes)
        values (1, '{{ encryptGitlabAccessToken }}', 'c7n', '2099-12-31', '2020-04-28 00:00:00', '2019-04-28 00:00:00',
        array_to_string(ARRAY ['---','- api','- read_user','- sudo','- read_repository'], chr(10)));
      infraRef: gitlab
      database: gitlabhq_production
    afterInstall:
    - name: enable_webhook
      request:
        header:
        - name: "content-type"
          value: "application/json"
        # TODO get GITLAB_OAUTH_TOKEN
        - name: "private-token"
          value: '{{ getReleaseValue "gitlab-service" "env.open.GITLAB_PRIVATETOKEN" }}'
        url: '{{(getResource "gitlab").Schema }}://{{(getResource "gitlab").Domain}}/api/v4/application/settings'
        body: |
          {
                  "allow_local_requests_from_hooks_and_services": true
          }
        method: PUT
    values:
    - name: "env.open.JAVA_OPTS"
      value: "-Xms1024M -Xmx1024M"
    - name: "env.open.GITLAB_PRIVATETOKEN"
      value: "{{ generateAlphaNum 20 }}"
  - name: workflow-service
    chart: workflow-service
    version: "0.21.0"
    resource:
      host: workflow-service
      port: 8066
      schema: ws
    requirements:
    - mysql
    - redis
    - gitlab
    - harbor
    - chartmuseum
    - register-server
    # - config-server
    - manager-service
    - notify-service
    preInstall:
    - name: predb
      commands:
        - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
        - CREATE DATABASE IF NOT EXISTS workflow_service DEFAULT CHARACTER SET utf8;
        - GRANT ALL PRIVILEGES ON workflow_service.* TO choerodon@"%";
        - FLUSH PRIVILEGES;
      infraRef: mysql
    values:
    - name: "env.open.JAVA_OPTS"
      value: "-Xms1024M -Xmx1024M"
  - name: agile-service
    chart: agile-service
    version: "0.21.0"
    resource:
      host: agile-service
      port: 8379
      schema: http
    requirements:
    - mysql
    - redis
    - minio
    - register-server
    - manager-service
    preInstall:
    - name: predb
      commands:
        - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
        - CREATE DATABASE IF NOT EXISTS agile_service DEFAULT CHARACTER SET utf8;
        - GRANT ALL PRIVILEGES ON agile_service.* TO choerodon@"%";
        - FLUSH PRIVILEGES;
      infraRef: mysql
    values:
    - name: "env.open.JAVA_OPTS"
      value: "-Xms1024M -Xmx1024M"
  - name: test-manager-service
    chart: test-manager-service
    version: "0.21.1"
    resource:
      host: test-manager-service
      port: 8394
      schema: http
    requirements:
    - mysql
    - redis
    - register-server
    - manager-service
    preInstall:
    - name: predb
      commands:
        - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
        - CREATE DATABASE IF NOT EXISTS test_manager_service DEFAULT CHARACTER SET utf8;
        - GRANT ALL PRIVILEGES ON test_manager_service.* TO choerodon@"%";
        - FLUSH PRIVILEGES;
      infraRef: mysql
    values:
    - name: "env.open.JAVA_OPTS"
      value: "-Xms1024M -Xmx1024M"
  - name: elasticsearch-kb
    chart: elasticsearch-kb
    version: 0.21.0
    resource:
      port: 9200
      host: "elasticsearch-kb"
    values:
    health:
      socket:
      - name: base
        host: '{{ getReleaseName "elasticsearch-kb" }}'
        port: 9200
  - name: knowledgebase-service
    chart: knowledgebase-service
    version: 0.21.0
    resource:
      host: knowledgebase-service
      port: 8280
      schema: http
    requirements:
    - mysql
    - redis
    - minio
    - register-server
    - manager-service
    preInstall:
    - name: predb
      commands:
        - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
        - CREATE DATABASE IF NOT EXISTS knowledgebase_service DEFAULT CHARACTER SET utf8;
        - GRANT ALL PRIVILEGES ON knowledgebase_service.* TO choerodon@"%";
        - FLUSH PRIVILEGES;
      infraRef: mysql
    values:
    - name: "env.open.JAVA_OPTS"
      value: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
  - name: choerodon-front
    chart: choerodon-front
    version: "0.21.2"
    resource:
      host: "choerodon-front"
      port: 80
      schema: http
    requirements:
    - mysql
    - minio
    - api-gateway
    - notify-service
    - harbor
    - base-service
    - devops-service
    preInstall:
    - name: predb
      commands:
        - USE base_service;
        - |
          INSERT INTO base_service.oauth_client (
            name,organization_id,resource_ids,secret,scope,
            authorized_grant_types,web_server_redirect_uri,
            access_token_validity,refresh_token_validity,
            additional_information,auto_approve,object_version_number,
            created_by,creation_date,last_updated_by,last_update_date)
          VALUES("choerodon",1,"default","secret","default",
                "password,implicit,client_credentials,authorization_code,refresh_token",
                '{{ ( getResource "choerodon-front").Schema }}://{{ ( getResource "choerodon-front").Domain }}',3600,3600,"{}","default",1,0,NOW(),0,NOW());
      infraRef: mysql
    values:
    - name: "ingress.host"
      value: '{{ ( getResource "choerodon-front").Domain }}'
      check: clusterdomain
    - name: "ingress.schema"
      value: '{{ ( getResource "choerodon-front").Schema }}'
      check: schema
  runner:
    name: gitlab-runner
    chart: gitlab-runner
    version: "0.2.4"
    resource:
      host: 
    requirements:
    - postgresql
    - gitlab
    values:
    - name: "rbac.create"
      value: "true"
    - name: "env.concurrent"
      value: "3"
    - name: "env.gitlabUrl"
      value: '{{ ( getResource "gitlab" ).Schema }}://{{ ( getResource "gitlab" ).Domain }}/'
    #  TODO
    - name: "env.runnerToken"
      value: "{{ ( generateAlphaNum 30) }}"
    - name: "env.environment.CHOERODON_URL"
      value: '{{ ( getResource "api-gateway").Schema }}://{{ ( getResource "api-gateway").Domain }}'
      # TODO
    - name: "env.persistence.gitlab-runner-maven"
      value: "/root/.m2"
    - name: "env.persistence.gitlab-runner-cache"
      value: "/cache"
    - name: "enabled_mount_host_docker_sock"
      value: "true"
    persistence:
    - name: gitlab-runner-maven
      path: gitlab-runner/maven
      mode: "755"
      accessModes: 
      - ReadWriteMany
      size: 20Gi
      pvcEnabled: true
      mountOptions:
      - hard
      - intr
      - nfsvers=4.0
    - name: gitlab-runner-cache
      path: gitlab-runner/cache
      mode: "755"
      accessModes:
      - ReadWriteMany
      size: 20Gi
      pvcEnabled: true
      mountOptions:
      - hard
      - intr
      - nfsvers=4.0
    preInstall:
    - name: insertrunnertoken
      psql:
        - |
          INSERT INTO
            ci_runners
            ( token, created_at, updated_at, description, is_shared, name, runner_type )
          VALUES
            ( '{{ getReleaseValue "env.runnerToken" }}', NOW(), NOW(), 'c7n-default', true,'gitlab-runner', 1 )
      infraRef: gitlab
      database: gitlabhq_production
  component:
    - name: mysql
      chart: mysql
      version: 0.1.4
      values:
        - name: "env.MYSQL_ROOT_PASSWORD"
          value: "admin"
          input:
            enabled: true
            regex: ".+"
            password: true
            tip: "请输入您要设置的mysql密码(不能为纯数字):"
            exclude:
              - value: "^\\d*$"
                name: "不能为纯数字"
        - name: "persistence.storageClass"
          value: "nfs-provisioner"
          input:
            enabled: true
            regex: ".+"
            password: false
            tip: "请输入mysql使用的storageClass:"
            exclude:
              - value: "^\\d*$"
                name: "不能为纯数字"
        - name: "persistence.enabled"
          value: "true"
        - name: "persistence.size"
          value: "20Gi"
        - name: "config.character_set_server"
          value: "utf8mb4"
        - name: "config.collation_server"
          value: "utf8mb4_general_ci"
        - name: "config.lower_case_table_names"
          value: "1"
        - name: "config.max_allowed_packet"
          value: "32M"
        - name: "config.max_connections"
          value: "1500"

    - name: redis
      chart: redis
      version: 0.2.5
      resource:
        # svc name = release name
        host: '{{ getReleaseName "redis" }}'
        port: 6379
      values:
        - name: "service.enabled"
          value: "true"
    - name: minio
      chart: minio
      version: 5.0.4
      resource:
        host: minio
        port: 9000
        schema: http
      requirements:
      values:
        - name: "ingress.hosts[0]"
          value: "minio.example.choerodon.io"
          input:
            enabled: true
            regex: ".+"
            tip: "请输入 minio 的域名: "
            password: false
            exclude:
              - value: "^\\d*$"
                name: "不能为纯数字"
        - name: "accessKey"
          value: "admin"
          input:
            enabled: true
            regex: ".{3,}"
            tip: "请设置的minio的ACCESS_KEY(3个字符以上,不能为纯数字): "
            password: false
            exclude:
              - value: "^\\d*$"
                name: "不能为纯数字"
        - name: "secretKey"
          value: "choerodon"
          input:
            enabled: true
            password: true
            regex: ".{8,40}"
            tip: "请设置的minio的SECRET_KEY(8-40字符,不能为纯数字): "
            exclude:
              - value: "^\\d*$"
                name: "不能为纯数字"
        - name: "mode"
          value: "distributed"
        - name: "persistence.enabled"
          value: "true"
        - name: "persistence.storageClass"
          value: "nfs-provisioner"
          input:
            enabled: true
            regex: ".+"
            password: false
            tip: "请输入mysql使用的storageClass: "
            exclude:
              - value: "^\\d*$"
                name: "不能为纯数字"
        - name: "persistence.size"
          value: "50Gi"
        - name: "ingress.enabled"
          value: "true"
    - name: nfs-client-provisioner
      chart: nfs-client-provisioner
      version: 0.1.1
      values:
        - name: "rbac.create"
          value: true
        - name: "persistence.enabled"
          value: true
        - name: "storageClass.name"
          value: nfs-provisioner
          input:
            enabled: true
            regex: ".+"
            password: false
            tip: "请输入 storageClass 的名字: "
            exclude:
              - value: "^\\d*$"
                name: "不能为纯数字"
        - name: "persistence.enabled"
          value: nfs-provisioner
          input:
            enabled: true
            regex: ".+"
            password: false
            tip: "请输入 NFS 服务器的IP: "
            exclude:
              - value: "^\\d*$"
                name: "不能为纯数字"
        - name: "persistence.nfsServer"
          value: nfs-provisioner
          input:
            enabled: true
            regex: ".+"
            password: false
            tip: "请输入 NFS 服务器的IP: "
            exclude:
              - value: "^\\d*$"
                name: "不能为纯数字"
        - name: "persistence.nfsPath"
          value: nfs-provisioner
          input:
            enabled: true
            regex: ".+"
            password: false
            tip: "请输入 NFS 的目录: "
            exclude:
              - value: "^\\d*$"
                name: "不能为纯数字"